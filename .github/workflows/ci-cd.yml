name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 程式碼品質檢查
  code-quality:
    name: 程式碼品質檢查
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 安裝相依套件
        run: npm ci
        
      - name: 執行 ESLint 檢查
        run: npm run lint
        
      - name: 執行 TypeScript 編譯檢查
        run: npx tsc --noEmit
        
      - name: 檢查程式碼格式
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

  # 單元測試
  unit-tests:
    name: 單元測試
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 安裝相依套件
        run: npm ci
        
      - name: 執行單元測試
        run: npm run test:run
        
      - name: 生成測試覆蓋率報告
        run: npm run test:coverage
        
      - name: 上傳覆蓋率報告
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 建構測試
  build-test:
    name: 建構測試
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 安裝相依套件
        run: npm ci
        
      - name: 建構應用程式
        run: npm run build
        
      - name: 檢查建構產物
        run: |
          ls -la dist/
          # 檢查關鍵檔案是否存在
          test -f dist/index.html
          test -d dist/assets
          
      - name: 上傳建構產物
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Docker 建構和測試
  docker-build:
    name: Docker 建構和測試
    runs-on: ubuntu-latest
    needs: [unit-tests, build-test]
    
    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 設定 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 登入 Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 提取 metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 建構和推送 Docker 映像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 測試 Docker 映像
        run: |
          # 啟動容器並測試
          docker run -d --name test-container -p 3000:80 ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 10
          # 測試服務是否正常回應
          curl -f http://localhost:3000 || exit 1
          docker stop test-container
          docker rm test-container

  # End-to-End 測試 (可選)
  e2e-tests:
    name: E2E 測試
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 設定 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 安裝相依套件
        run: npm ci
        
      - name: 啟動開發伺服器
        run: |
          npm run dev &
          sleep 30
          
      - name: 安裝 Playwright
        run: npx playwright install --with-deps
        
      - name: 執行 E2E 測試
        run: npx playwright test
        
      - name: 上傳 E2E 測試報告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # 效能測試
  performance-tests:
    name: 效能測試
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 啟動測試環境
        run: |
          docker run -d --name perf-test -p 3000:80 ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 15
          
      - name: 安裝 Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: 執行 Lighthouse 效能測試
        run: |
          lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse CI failed but continuing"
          
      - name: 清理測試環境
        run: |
          docker stop perf-test
          docker rm perf-test

  # 部署至 staging (develop 分支)
  deploy-staging:
    name: 部署至 Staging
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 部署通知
        run: |
          echo "正在部署至 Staging 環境..."
          echo "映像標籤: ${{ github.sha }}"
          
      # 這裡可以加入實際的部署步驟
      # 例如：更新 Kubernetes deployment、通知部署服務等
      
  # 部署至 production (main 分支)
  deploy-production:
    name: 部署至 Production
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-build, e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 等待手動批准
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Production 部署批准請求"
          
      - name: 部署通知
        run: |
          echo "正在部署至 Production 環境..."
          echo "映像標籤: ${{ github.sha }}"
          
      # 這裡可以加入實際的部署步驟
      
  # 清理舊的映像
  cleanup:
    name: 清理舊映像
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: 清理舊的 Container Registry 映像
        run: |
          echo "清理舊的映像..."
          # 這裡可以加入清理邏輯
